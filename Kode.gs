// ============= KONFIGURASI CLOUDFLARE =============
const CLOUDFLARE_CONFIG = {
  email: '<email-cloudflare>',
  apiKey: '<apikey>',
  apiEndpoint: 'https://api.cloudflare.com/client/v4/zones'
};

// ============= KONFIGURASI GOOGLE SHEETS =============
const SHEETS_CONFIG = {
  spreadsheetId: '<idspreadsheet>',
  domainsSheetName: 'DOMAINS',
  subdomainsSheetName: 'SUBDOMAINS',
  analyticsSheetName: 'ANALYTICS'
};

// ============= KONFIGURASI WHATSAPP =============
const WHATSAPP_CONFIG = {
  apiKey: '<apikey>',
  sender: '<sender>',
  recipient: '<hp-penerima>',
  apiEndpoint: 'https://mpedia/send-message'
};

// ============= KONFIGURASI TELEGRAM =============
const TELEGRAM_CONFIG = {
  botToken: '<id-token>',
  chatId: '<id-chat>'
};

// ============= KONFIGURASI EMAIL =============
const EMAIL_CONFIG = {
  senderName: 'DNS Monitor System',
  recipientEmail: '<email-tujuan>'
};

// ============= KONFIGURASI GOOGLE DRIVE =============
const DRIVE_CONFIG = {
  folderId: '<id-folder-drive>'
};

// ============= HELPER FUNCTIONS =============
function getOrCreateSheet(spreadsheet, sheetName, headers) {
  var sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
    if (headers) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length)
        .setBackground('#4A90E2')
        .setFontColor('white')
        .setFontWeight('bold');
    }
  }
  return sheet;
}

function formatBytes(bytes) {
  if (!bytes || bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function calculatePercentage(part, whole) {
  if (!whole || whole === 0) return "0.00";
  return ((part / whole) * 100).toFixed(2);
}

// ============= REPORT GENERATION FUNCTIONS =============
function createDomainReport(domainList, domainCount, formattedDate) {
  return `LAPORAN DOMAIN CLOUDFLARE
==========================================
📅 Tanggal: ${formattedDate}
📧 Account: ${CLOUDFLARE_CONFIG.email}
🌐 Total Domain: ${domainCount}

DAFTAR DOMAIN:
==========================================
${domainList.map((domain, index) => `${index + 1}. ${domain}`).join('\n')}

==========================================
Report generated by Cloudflare Monitor System`;
}

function createDNSReport(subdomainList, subdomainCount, formattedDate) {
  return `LAPORAN DNS RECORDS CLOUDFLARE
==========================================
📅 Tanggal: ${formattedDate}
📧 Account: ${CLOUDFLARE_CONFIG.email}
🔍 Total DNS Records: ${subdomainCount}

DAFTAR DNS RECORDS:
==========================================
${subdomainList.map((record, index) => `${index + 1}. ${record}`).join('\n\n')}

==========================================
Report generated by Cloudflare Monitor System`;
}

function createAnalyticsReport(analyticsList, totalDomains, noDataDomains, formattedDate) {
  const availableDataCount = totalDomains - noDataDomains.length;
  const successRate = calculatePercentage(availableDataCount, totalDomains);

  let report = `LAPORAN ANALYTICS CLOUDFLARE
==========================================
📅 Tanggal: ${formattedDate}
📧 Account: ${CLOUDFLARE_CONFIG.email}
📊 Periode: 24 JAM TERAKHIR

RINGKASAN KETERSEDIAAN DATA:
------------------------------------------
✅ Total Domain: ${totalDomains}
📊 Domain dengan Data: ${availableDataCount} (${successRate}%)
❌ Domain tanpa Data: ${noDataDomains.length}

DOMAIN TANPA DATA ANALYTICS:
------------------------------------------
${noDataDomains.length > 0 ? 
  noDataDomains.map((domain, index) => `${index + 1}. ${domain}`).join('\n') : 
  '✅ Semua domain memiliki data analytics'}

STATISTIK PER DOMAIN:
------------------------------------------
${analyticsList.join('\n\n')}

==========================================
Report generated by Cloudflare Monitor System
Generated at: ${formattedDate}`;

  return report;
}

// ============= ANALYTICS FUNCTION =============
function getCloudflareAnalytics(zoneId, zoneName) {
  const graphqlEndpoint = 'https://api.cloudflare.com/client/v4/graphql';
  
  const now = new Date();
  const yesterday = new Date(now.getTime() - (24 * 60 * 60 * 1000));
  
  const query = `{
    viewer {
      zones(filter: {zoneTag: "${zoneId}"}) {
        httpRequests1dGroups(
          limit: 1
          filter: {
            date_gt: "${yesterday.toISOString().split('T')[0]}"
            date_leq: "${now.toISOString().split('T')[0]}"
          }
        ) {
          sum {
            pageViews
            requests
            bytes
            cachedBytes
            threats
            browserMap {
              pageViews
              uaBrowserFamily
            }
            responseStatusMap {
              requests
              edgeResponseStatus
            }
          }
        }
      }
    }
  }`;

  const options = {
    'method': 'post',
    'headers': {
      'X-Auth-Email': CLOUDFLARE_CONFIG.email,
      'X-Auth-Key': CLOUDFLARE_CONFIG.apiKey,
      'Content-Type': 'application/json'
    },
    'payload': JSON.stringify({ query }),
    'muteHttpExceptions': true
  };

  try {
    const response = UrlFetchApp.fetch(graphqlEndpoint, options);
    const json = JSON.parse(response.getContentText());
    
    if (!json.data || !json.data.viewer.zones[0].httpRequests1dGroups[0]) {
      Logger.log(`No data available for zone ${zoneName}`);
      return null;
    }

    const data = json.data.viewer.zones[0].httpRequests1dGroups[0].sum;
    
    // Process browser data
    const browsers = data.browserMap || [];
    const topBrowsers = browsers
      .sort((a, b) => b.pageViews - a.pageViews)
      .slice(0, 3)
      .map(b => `${b.uaBrowserFamily}`)
      .join(', ');

    // Calculate response status
    const statusMap = data.responseStatusMap || [];
    const status2xx = statusMap
      .filter(s => String(s.edgeResponseStatus).match(/^2/))
      .reduce((acc, curr) => acc + (curr.requests || 0), 0);
    const status4xx = statusMap
      .filter(s => String(s.edgeResponseStatus).match(/^4/))
      .reduce((acc, curr) => acc + (curr.requests || 0), 0);
    const status5xx = statusMap
      .filter(s => String(s.edgeResponseStatus).match(/^5/))
      .reduce((acc, curr) => acc + (curr.requests || 0), 0);

    // Calculate performance metrics
    const totalBytes = data.bytes || 0;
    const cachedBytes = data.cachedBytes || 0;
    const totalRequests = data.requests || 0;
    
    const cacheRate = calculatePercentage(cachedBytes, totalBytes);
    const successRate = calculatePercentage(status2xx, totalRequests);
    const performanceScore = totalRequests > 0 ? 
      ((parseFloat(cacheRate) + parseFloat(successRate)) / 2).toFixed(2) : 
      "0.00";

    return {
      uniqueVisitors: data.pageViews || 0,
      totalRequests: totalRequests,
      bandwidthTotal: formatBytes(totalBytes),
      bandwidthCached: formatBytes(cachedBytes),
      percentCached: cacheRate,
      threats: data.threats || 0,
      responseStatus: {
        '2xx': status2xx,
        '4xx': status4xx,
        '5xx': status5xx
      },
      performanceScore: performanceScore,
      topBrowsers: topBrowsers || 'No data',
      successRate: successRate
    };

  } catch (e) {
    Logger.log(`Error fetching analytics for ${zoneName}: ${e.toString()}`);
    return null;
  }
}

// ============= NOTIFICATION FUNCTIONS =============
function sendWhatsAppMessage(message) {
  var payload = {
    'api_key': WHATSAPP_CONFIG.apiKey,
    'sender': WHATSAPP_CONFIG.sender,
    'number': WHATSAPP_CONFIG.recipient,
    'message': message
  };

  var options = {
    'method': 'post',
    'contentType': 'application/json',
    'payload': JSON.stringify(payload)
  };

  UrlFetchApp.fetch(WHATSAPP_CONFIG.apiEndpoint, options);
  Utilities.sleep(1000); // Delay to prevent rate limiting
}

function exportToTextFile(content, fileNamePrefix) {
  var folder = DriveApp.getFolderById(DRIVE_CONFIG.folderId);
  var fileName = `cloudflare_${fileNamePrefix}.txt`;
  var file = folder.createFile(fileName, content);
  return file.getId();
}

function sendTelegramMessage(fileId, message) {
  var telegramUrl = `https://api.telegram.org/bot${TELEGRAM_CONFIG.botToken}/sendDocument`;
  var file = DriveApp.getFileById(fileId);
  
  var formData = {
    chat_id: TELEGRAM_CONFIG.chatId,
    caption: message,
    document: file.getBlob()
  };

  var options = {
    method: 'post',
    payload: formData
  };

  UrlFetchApp.fetch(telegramUrl, options);
  Utilities.sleep(1000); // Delay to prevent rate limiting
}

function sendFormattedEmail(subject, content, formattedDate) {
  var htmlBody = `
    <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
      <div style="background-color: #4A90E2; color: white; padding: 20px; border-radius: 5px;">
        <h1 style="margin: 0; padding: 0;">${subject}</h1>
        <p style="margin: 10px 0 0 0;">${formattedDate}</p>
      </div>
      
      <div style="margin-top: 20px; background-color: #f8f9fa; padding: 20px; border-radius: 5px; border: 1px solid #e9ecef;">
        <pre style="white-space: pre-wrap; font-family: 'Courier New', Courier, monospace; margin: 0; font-size: 14px;">
${content}
        </pre>
      </div>
      
      <div style="margin-top: 20px; padding: 20px; background-color: #f8f9fa; border-radius: 5px; border: 1px solid #e9ecef;">
        <h3 style="margin: 0 0 10px 0; color: #4A90E2;">Informasi:</h3>
        <ul style="margin: 0; padding-left: 20px;">
          <li>Report ini digenerate secara otomatis</li>
          <li>Data analytics diambil untuk periode 24 jam terakhir</li>
          <li>Periksa domain tanpa data untuk investigasi lebih lanjut</li>
          <li>Monitor performa dan keamanan setiap domain</li>
        </ul>
      </div>
      
      <div style="margin-top: 20px; text-align: center; color: #6c757d; font-size: 12px; padding: 20px; background-color: #f8f9fa; border-radius: 5px;">
        <p style="margin: 0;">Email ini digenerate secara otomatis, mohon jangan membalas email ini.</p>
        <p style="margin: 5px 0 0 0;">© ${new Date().getFullYear()} Cloudflare Monitor System</p>
      </div>
    </div>
  `;

  GmailApp.sendEmail(EMAIL_CONFIG.recipientEmail, subject, content, {
    name: EMAIL_CONFIG.senderName,
    htmlBody: htmlBody
  });
}

// ============= MAIN FUNCTION =============
function listCloudflareRecords() {
  var headers = {
    'X-Auth-Email': CLOUDFLARE_CONFIG.email,
    'X-Auth-Key': CLOUDFLARE_CONFIG.apiKey,
    'Content-Type': 'application/json'
  };
  
  var options = {
    'method': 'get',
    'headers': headers,
    'muteHttpExceptions': true
  };

  var spreadsheet = SpreadsheetApp.openById(SHEETS_CONFIG.spreadsheetId);
  
  // Set up sheets dengan headers
  var domainsSheet = getOrCreateSheet(spreadsheet, SHEETS_CONFIG.domainsSheetName, 
    ['Zone ID', 'Domain']);
    
  var subdomainsSheet = getOrCreateSheet(spreadsheet, SHEETS_CONFIG.subdomainsSheetName, 
    ['Domain', 'Subdomain', 'Type', 'Content']);
    
  var analyticsSheet = getOrCreateSheet(spreadsheet, SHEETS_CONFIG.analyticsSheetName, 
    ['Domain', 'Unique Visitors', 'Total Requests', 'Bandwidth Total', 
     'Bandwidth Cached', 'Cache Hit Rate', 'Threats', 'HTTP 2xx', 
     'HTTP 4xx', 'HTTP 5xx', 'Performance Score', 'Top Browsers', 'Success Rate']);

  // Clear existing data but keep headers
  if (domainsSheet.getLastRow() > 1) {
    domainsSheet.getRange(2, 1, domainsSheet.getLastRow()-1, domainsSheet.getLastColumn()).clear();
  }
  if (subdomainsSheet.getLastRow() > 1) {
    subdomainsSheet.getRange(2, 1, subdomainsSheet.getLastRow()-1, subdomainsSheet.getLastColumn()).clear();
  }
  if (analyticsSheet.getLastRow() > 1) {
    analyticsSheet.getRange(2, 1, analyticsSheet.getLastRow()-1, analyticsSheet.getLastColumn()).clear();
  }

  var domainRow = 2;
  var subdomainRow = 2;
  var analyticsRow = 2;
  
  var domainList = [];
  var subdomainList = [];
  var analyticsList = [];
  var noDataDomains = [];
  var domainCount = 0;
  var subdomainCount = 0;
  var totalAnalyticsProcessed = 0;
  var totalSuccessfulAnalytics = 0;

  var now = new Date();
  var formattedDate = Utilities.formatDate(now, 'GMT+7', 'dd-MM-yyyy HH:mm:ss');
  var formattedDateFile = Utilities.formatDate(now, 'GMT+7', 'yyyy-MM-dd_HH-mm');

  try {
    // Mendapatkan daftar zona
    var response = UrlFetchApp.fetch(CLOUDFLARE_CONFIG.apiEndpoint, options);
    var json = JSON.parse(response.getContentText());
    
    if (!json.success) {
      Logger.log('Error: ' + JSON.stringify(json.errors));
      return;
    }
    
    var zones = json.result;
    
    // Iterasi melalui setiap zona
    for (var i = 0; i < zones.length; i++) {
      var zone = zones[i];
      var zoneId = zone.id;
      var zoneName = zone.name;
      
      // Simpan domain ke sheet DOMAINS
      domainsSheet.getRange(domainRow, 1, 1, 2).setValues([[zoneId, zoneName]]);
      domainRow++;
      domainList.push(`${zoneName} (Zone ID: ${zoneId})`);
      domainCount++;
      
      // Ambil DNS records
      var recordsEndpoint = `${CLOUDFLARE_CONFIG.apiEndpoint}/${zoneId}/dns_records`;
      var recordsResponse = UrlFetchApp.fetch(recordsEndpoint, options);
      var recordsJson = JSON.parse(recordsResponse.getContentText());
      
      if (!recordsJson.success) {
        Logger.log('Error getting records for zone ' + zoneName + ': ' + JSON.stringify(recordsJson.errors));
        continue;
      }
      
      var records = recordsJson.result;
      
      // Proses DNS records
      for (var j = 0; j < records.length; j++) {
        var record = records[j];
        var subdomain = record.name;
        var type = record.type;
        var content = record.content;

        subdomainsSheet.getRange(subdomainRow, 1, 1, 4).setValues([[zoneName, subdomain, type, content]]);
        subdomainRow++;
        subdomainList.push(`Domain: ${zoneName}\nSubdomain: ${subdomain}\nType: ${type}\nContent: ${content}`);
        subdomainCount++;
      }

      // Ambil analytics data
      try {
        totalAnalyticsProcessed++;
        var analytics = getCloudflareAnalytics(zoneId, zoneName);
        
        if (analytics) {
          totalSuccessfulAnalytics++;
          analyticsSheet.getRange(analyticsRow, 1, 1, 13).setValues([[
            zoneName,
            analytics.uniqueVisitors,
            analytics.totalRequests,
            analytics.bandwidthTotal,
            analytics.bandwidthCached,
            analytics.percentCached + '%',
            analytics.threats,
            analytics.responseStatus['2xx'],
            analytics.responseStatus['4xx'],
            analytics.responseStatus['5xx'],
            analytics.performanceScore,
            analytics.topBrowsers,
            analytics.successRate + '%'
          ]]);
          analyticsRow++;

          analyticsList.push(
            `📊 Domain: ${zoneName}\n` +
            `  👥 Unique Visitors: ${analytics.uniqueVisitors}\n` +
            `  📈 Total Requests: ${analytics.totalRequests}\n` +
            `  💾 Total Bandwidth: ${analytics.bandwidthTotal}\n` +
            `  📦 Cached Bandwidth: ${analytics.bandwidthCached}\n` +
            `  🚀 Cache Hit Rate: ${analytics.percentCached}%\n` +
            `  🛡️ Threats Blocked: ${analytics.threats}\n` +
            `  ✅ Success Rate: ${analytics.successRate}%\n` +
            `  ⚠️ Error Rate: ${calculatePercentage(analytics.responseStatus['4xx'] + analytics.responseStatus['5xx'], analytics.totalRequests)}%\n` +
            `  📊 Performance Score: ${analytics.performanceScore}\n` +
            `  🌐 Top Browsers: ${analytics.topBrowsers}`
          );
        } else {
          noDataDomains.push(zoneName);
        }
      } catch (analyticsError) {
        Logger.log(`Error getting analytics for ${zoneName}: ${analyticsError.toString()}`);
        noDataDomains.push(zoneName);
      }
    }

    // Membuat laporan terpisah
    const domainReport = createDomainReport(domainList, domainCount, formattedDate);
    const dnsReport = createDNSReport(subdomainList, subdomainCount, formattedDate);
    const analyticsReport = createAnalyticsReport(analyticsList, domainCount, noDataDomains, formattedDate);

    // Save reports to Drive
    var domainFileId = exportToTextFile(domainReport, `domains_${formattedDateFile}`);
    var dnsFileId = exportToTextFile(dnsReport, `dns_records_${formattedDateFile}`);
    var analyticsFileId = exportToTextFile(analyticsReport, `analytics_${formattedDateFile}`);

    // Analytics summary for notifications
    const analyticsSummary = 
      "📊 RINGKASAN ANALYTICS CLOUDFLARE\n" +
      `📅 ${formattedDate}\n\n` +
      `✅ Total Domain: ${domainCount}\n` +
      `📊 Domain dengan Data: ${totalSuccessfulAnalytics}\n` +
      `❌ Domain tanpa Data: ${noDataDomains.length}\n` +
      `📈 Persentase Ketersediaan: ${calculatePercentage(totalSuccessfulAnalytics, domainCount)}%\n\n` +
      (noDataDomains.length > 0 ? 
        `Domain tanpa data:\n${noDataDomains.map((d, i) => `${i+1}. ${d}`).join('\n')}\n\n` : 
        "✅ Semua domain memiliki data analytics\n\n");

    // Send to Telegram
    sendTelegramMessage(domainFileId, 
      "🌐 LAPORAN DOMAIN CLOUDFLARE\n" + 
      `📅 ${formattedDate}\n` +
      `📊 Total Domain: ${domainCount}`
    );
    
    sendTelegramMessage(dnsFileId, 
      "🔍 LAPORAN DNS RECORDS CLOUDFLARE\n" +
      `📅 ${formattedDate}\n` +
      `📊 Total Records: ${subdomainCount}`
    );
    
    if (analyticsList.length > 0) {
      sendTelegramMessage(analyticsFileId, analyticsSummary);
    }

    // Send to WhatsApp
    // Domain Report Summary
    sendWhatsAppMessage(
      "🌐 LAPORAN DOMAIN CLOUDFLARE\n" +
      `📅 ${formattedDate}\n` +
      `📊 Total Domain: ${domainCount}\n\n` +
      domainList.map((domain, index) => `${index + 1}. ${domain}`).join('\n')
    );

    // DNS Report Summary
    sendWhatsAppMessage(
      "🔍 LAPORAN DNS RECORDS\n" +
      `📅 ${formattedDate}\n` +
      `📊 Total Records: ${subdomainCount}\n\n` +
      "Laporan lengkap telah dikirim melalui email dan Telegram"
    );

    // Analytics Summary and Details
    if (analyticsList.length > 0) {
      // Send summary first
      sendWhatsAppMessage(analyticsSummary);

      // Send details in chunks
      const chunkSize = 5;
      for (let i = 0; i < analyticsList.length; i += chunkSize) {
        const chunk = analyticsList.slice(i, i + chunkSize);
        sendWhatsAppMessage(
          "📊 DETAIL ANALYTICS CLOUDFLARE\n" +
          `📅 ${formattedDate}\n` +
          `📈 Data 24 jam terakhir (${i+1} - ${Math.min(i+chunkSize, analyticsList.length)} dari ${analyticsList.length} domain)\n\n` +
          chunk.join('\n\n')
        );
      }
    }

    // Send Emails
    sendFormattedEmail(
      `Laporan Domain Cloudflare - ${formattedDate}`,
      domainReport,
      formattedDate
    );

    sendFormattedEmail(
      `Laporan DNS Records Cloudflare - ${formattedDate}`,
      dnsReport,
      formattedDate
    );

    if (analyticsList.length > 0) {
      sendFormattedEmail(
        `Laporan Analytics Cloudflare - ${formattedDate}`,
        analyticsReport,
        formattedDate
      );
    }

  } catch (e) {
    Logger.log('Error: ' + e.toString());
    // Send error notification
    const errorMessage = 
      "❌ ERROR PADA CLOUDFLARE MONITOR\n" +
      `📅 ${formattedDate}\n\n` +
      `Error: ${e.toString()}\n\n` +
      "Mohon cek log untuk detail lebih lanjut.";
    
    sendWhatsAppMessage(errorMessage);
    sendFormattedEmail(
      `Error pada Cloudflare Monitor - ${formattedDate}`,
      errorMessage,
      formattedDate
    );
  }
}
